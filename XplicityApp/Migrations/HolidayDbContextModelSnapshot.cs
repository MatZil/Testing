// <auto-generated />

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using System;
using XplicityApp.Infrastructure.Database;

namespace XplicityApp.Migrations
{
    [DbContext(typeof(HolidayDbContext))]
    partial class HolidayDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("XplicityApp.Infrastructure.Database.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("OwnerEmail")
                        .IsRequired();

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("OwnerPhone")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<string>("OwnerSurname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("XplicityApp.Infrastructure.Database.Models.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Instructions")
                        .IsRequired();

                    b.Property<string>("Purpose")
                        .IsRequired();

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<string>("Template")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Purpose")
                        .IsUnique();

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Instructions = @"{admin.name} - Receiving admin's first name.
{employee.fullName} - Employee's full name.
{holiday.paid} - Whether or not holiday is paid.
{holiday.type} - Holiday's type.
{holiday.from} - Holiday's starting date.
{holiday.to} - Holiday's ending date.
{client.status} - Message that client has confirmed the holiday.
{holiday.overtimeHours} - Message that employee wants to use some of his overtime hours for this holiday.
{holiday.confirm} - Holiday's confirmation link.
{holiday.decline} - Holiday's rejection link.",
                            Purpose = "Admin Confirmation",
                            Subject = "An employee is requesting confirmation for holidays",
                            Template = @"Hello, {admin.name},

An employee {employee.fullName} is intending to go on {holiday.paid} {holiday.type} holidays from {holiday.from} to {holiday.to} (inclusive). {client.status} {holiday.overtimeHours}

Click this link to confirm: {holiday.confirm}
Click this link to decline: {holiday.decline}"
                        },
                        new
                        {
                            Id = 2,
                            Instructions = @"{client.name} - Receiving client's first name.
 {employee.fullName} - Employee's full name.
{holiday.type} - Holiday's type.
{holiday.from} - Holiday's starting date.
{holiday.to} - Holiday's ending date.
{holiday.confirm} - Holiday's confirmation link.
{holiday.decline} - Holiday's rejection link.",
                            Purpose = "Client Confirmation",
                            Subject = "One of your employees is requesting confirmation for holidays",
                            Template = @"Hello, {client.name},

An employee {employee.fullName} is intending to go on {holiday.type} holidays from {holiday.from} to {holiday.to} (inclusive).

Click this link to confirm: {holiday.confirm}
Click this link to decline: {holiday.decline}"
                        },
                        new
                        {
                            Id = 3,
                            Instructions = @"{client.name} - Individual team's client's name.
{employee.fullName} - Individual employee's full name.
{holiday.paid} - Whether or not the holiday is paid.
{holiday.type} - Holiday's type.
{holiday.from} - Holiday's starting date.
{holiday.to} - Holiday's beginning date.
{holiday.overtimeHours} - Message about individual employee's overtime hours.

Please use the first line for team's title, second line for individual employee's info.",
                            Purpose = "Monthly Holidays' Report",
                            Subject = "Monthly Holidays' Report Grouped By Teams",
                            Template = @"{client.name} team's employees:

{employee.fullName} went on {holiday.paid} {holiday.type} holidays from {holiday.from} to {holiday.to} (inclusive). {holiday.overtimeHours}."
                        },
                        new
                        {
                            Id = 5,
                            Instructions = "{employee.fullName} - Employee's full name.",
                            Purpose = "Birthday Reminder",
                            Subject = "One of your colleagues is having their birthday today!",
                            Template = "Your colleague {employee.fullName} is having their birthday today! Don't forget to congratulate them."
                        },
                        new
                        {
                            Id = 4,
                            Instructions = @"{employee.fullName} - Employee's full name.
{holiday.from} - Holiday's starting date.
{holiday.to} - Holiday's ending date.",
                            Purpose = "Upcoming Holiday Reminder",
                            Subject = "One of your colleagues is going away for holidays next workday!",
                            Template = "Your colleague {employee.fullName} is going away for holidays next workday from {holiday.from} to {holiday.to} (inclusive)."
                        },
                        new
                        {
                            Id = 7,
                            Instructions = @"{employee.fullName} - Employee's full name.
{download.link} - A link to download order document.",
                            Purpose = "Order Notification",
                            Subject = "A holiday order has been generated!",
                            Template = "A holiday order for {employee.fullName} has been generated. Click this link to download it: {download.link}"
                        },
                        new
                        {
                            Id = 6,
                            Instructions = "{download.link} - A link to download request document.",
                            Purpose = "Request Notification",
                            Subject = "Your holiday request has been generated!",
                            Template = "You can download your holiday request document by clicking this link: {download.link}"
                        });
                });

            modelBuilder.Entity("XplicityApp.Infrastructure.Database.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthdayDate");

                    b.Property<int?>("ClientId");

                    b.Property<int>("CurrentAvailableLeaves");

                    b.Property<int>("DaysOfVacation");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<double>("FreeWorkDays");

                    b.Property<DateTime>("HealthCheckDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("NextMonthAvailableLeaves");

                    b.Property<double>("OvertimeHours");

                    b.Property<int>("ParentalLeaveLimit");

                    b.Property<string>("Position");

                    b.Property<int>("Status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("WorksFromDate");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthdayDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentAvailableLeaves = 0,
                            DaysOfVacation = 20,
                            Email = "gamma.holidays@gmail.com",
                            FreeWorkDays = 0.0,
                            HealthCheckDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin",
                            NextMonthAvailableLeaves = 0,
                            OvertimeHours = 0.0,
                            ParentalLeaveLimit = 0,
                            Position = "Administrator",
                            Status = 1,
                            Surname = "Admin",
                            WorksFromDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("XplicityApp.Infrastructure.Database.Models.FileRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("FileRecords");
                });

            modelBuilder.Entity("XplicityApp.Infrastructure.Database.Models.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime>("FromInclusive");

                    b.Property<int>("OvertimeDays");

                    b.Property<bool>("Paid");

                    b.Property<DateTime>("RequestCreatedDate");

                    b.Property<int>("Status");

                    b.Property<DateTime>("ToExclusive");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("XplicityApp.Infrastructure.Database.Models.InventoryCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("Normative");

                    b.HasKey("Id");

                    b.ToTable("InventoryCategories");
                });

            modelBuilder.Entity("XplicityApp.Infrastructure.Database.Models.InventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime?>("ExpiryDate");

                    b.Property<int>("InventoryCategoryId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<string>("SerialNumber")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InventoryCategoryId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("XplicityApp.Infrastructure.Database.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("EmployeeId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("XplicityApp.Infrastructure.Database.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("XplicityApp.Infrastructure.Database.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("XplicityApp.Infrastructure.Database.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("XplicityApp.Infrastructure.Database.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("XplicityApp.Infrastructure.Database.Models.Employee", b =>
                {
                    b.HasOne("XplicityApp.Infrastructure.Database.Models.Client", "Client")
                        .WithMany("Employees")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("XplicityApp.Infrastructure.Database.Models.Holiday", b =>
                {
                    b.HasOne("XplicityApp.Infrastructure.Database.Models.Employee", "Employee")
                        .WithMany("Holidays")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("XplicityApp.Infrastructure.Database.Models.InventoryItem", b =>
                {
                    b.HasOne("XplicityApp.Infrastructure.Database.Models.Employee", "Employee")
                        .WithMany("InventoryItems")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("XplicityApp.Infrastructure.Database.Models.InventoryCategory", "Category")
                        .WithMany("Items")
                        .HasForeignKey("InventoryCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("XplicityApp.Infrastructure.Database.Models.User", b =>
                {
                    b.HasOne("XplicityApp.Infrastructure.Database.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
